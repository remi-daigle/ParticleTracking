{
    "collab_server" : "",
    "contents" : "#Clear workspace\nrm(list=ls())\n\n###################TABLE OF CONTENTS\n\n###[1] Creating grid that will be used for connectivity\n###[2] Identifying release locations and their place in grid\n###[3] Identifying settlement locations and linking to release locations\n\n\n#load in required packages\nrequire(data.table)\nrequire(tidyverse)\nrequire(readr)\nrequire(rgdal)\nrequire(rgeos)\nrequire(maptools)\n#setwd(\"C:/Christopher_MSc/Github/ParticleTracking\")\ngetwd()\n#testing adding code from home computer\n\n############################################################\n############################################################\n### [1] Creating connectivity grid\n\n#Loading a grid that you will divide BC ocean into\ngrid <- readOGR(\"./cuke_present/StudyExtent\", \"grid\")\n#Dissolve into one polygon since so you can change grid dimensions\nMy_BC_projection <- CRS(\"+proj=aea +lat_1=47 +lat_2=54 +lat_0=40 +lon_0=-130 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0 \")\nConPoly <- spTransform(grid, My_BC_projection) #use your custom BC projection for this\nConPoly <- gUnaryUnion(ConPoly)\nplot(ConPoly)\nrm(grid)\n\n#Adding dataframe to convert back to SpatialPolygonsDataFrame\nConPoly_ID <- row.names(ConPoly)\nConPoly_ID <- as.data.frame(ConPoly_ID)\n# And add the data back in\nConPoly <- SpatialPolygonsDataFrame(ConPoly, ConPoly_ID)\nrm(ConPoly_ID)\n\n#Make your Connectivity grid into a raster, then convert back into a shapefile so you can see how many larvae move from release site to final location\nlibrary(raster)\nr <- raster(extent(ConPoly))\nprojection(r) <- proj4string(ConPoly)\nres(r) <- 3000\n\nptm <- proc.time()\nConGrid <- rasterize(ConPoly, r) #5 seconds\nproc.time() - ptm\nplot(ConGrid)\nrm(r)\n\n#Back into polygon\nConPoly <- rasterToPolygons(ConGrid, fun=NULL, n=4, na.rm=TRUE, digits=12, dissolve=FALSE) #couple of seconds, can be much longer depending on file size\nhead(ConPoly@data)\n#Adding in unique IDs for each polygon\nConPoly@data$Poly_ID <- as.numeric(row.names(ConPoly))\n\nwriteOGR(ConPoly, dsn = \"./output\", \"ConPoly\",\n         driver = \"ESRI Shapefile\", verbose = TRUE, overwrite = TRUE, morphToESRI = TRUE)\n\n\n\n########################################################################\n########################################################################\n### [2] Loading up larval release points\n\n#Acquiring files\nfilenames <- list.files(path = \"./cuke_present/ReleaseLocations\", pattern=\"rl_.\", full.names=TRUE,recursive=T)\n\n# load all files into a list, read_csv is much faster than read.csv\nrllist <- lapply(filenames, read_csv,\n                 col_names = c(\"long0\",\"lat0\",\"Z0\",\"delay\",\"site0\"),\n                 col_types = cols(\"d\",\"d\",\"i\",\"i\",\"i\")\n                 )\n\n# set the names of the items in the list, so that you know which file it came from\nrllist <- setNames(rllist,filenames)\n\n# rbind the list\nrl <- rbindlist(rllist, idcol=\"filename\")\n\nrl$bin <- gsub(\".*rl_|.txt.*\", \"\",rl$filename)\nhead(rl)\n\n#Creating csv file ith all starting locations\nwrite.csv(rl, file=\"./output/release_locations.csv\", row.names = F)\n\n\n### [2b] Creating map of release locations\nrelease_points <- subset(rl, select = c(long0, lat0, Z0))\nrelease_points <- as.data.frame(release_points)\n\nxy <- release_points[,c(1,2)]\nNAD_projection <- proj4string(grid)\nMy_BC_projection <- CRS(\"+proj=aea +lat_1=47 +lat_2=54 +lat_0=40 +lon_0=-130 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0 \")\n\nrelease_larvae <- SpatialPointsDataFrame(coords = xy, data = release_points, proj4string = CRS(NAD_projection))\nrelease_larvae <- spTransform(release_larvae, My_BC_projection) #use your custom BC projection for this\nplot(release_larvae)\n\n#Associate points with where they were released from\nrequire(spatialEco)\nrelease_larvae_map <- point.in.poly(release_larvae, ConPoly)\nhead(release_larvae_map@data)\nplot(release_larvae_map)\n\n#write out points\nwriteOGR(release_larvae_map, dsn = \"./output\", layer = \"release_points\", driver = \"ESRI Shapefile\", overwrite = TRUE)\n\n\n\n########################################################################\n########################################################################\n#[3] Identifying settlement locations and linking to release locations\n\n# List the particle tracking files for that particular year and pld\nyear <- 1999\npld <- 120\n\n#Acquiring files\nfilenames <- list.files(path=paste0(\"./cuke_present/ConData/G\",year), pattern=glob2rx(paste0(\"*para    1\",formatC(pld+1, width = 3, format = \"d\", flag = \"0\"),\"*\")), full.names=TRUE,recursive=T)\n\n# load all files into a list, read_csv is much faster than read.csv\ndatalist <- lapply(filenames, read_csv,\n                   col_names = c(\"long\",\"lat\",\"Z\",\"Out\",\"site\"),\n                   col_types = cols(\"d\",\"d\",\"d\",\"i\",\"i\")\n                   )\n\n# set the names of the items in the list, so that you know which file it came from\ndatalist <- setNames(datalist,filenames)\n\n# rbind the list\ndataset <- rbindlist(datalist, idcol=\"filename\")\ndataset$site <- NA\nrm(datalist)\n\n#Reshaping dataset to take filename info and turning it into columns\ndataset <- dataset %>%\n  mutate(temp=substr(filename,24,nchar(filename))) %>%\n  separate(temp,c(\"temp_type_year\",\"rday\",\"bin\",\"time\"),\"/\",convert=TRUE) %>% \n  separate(temp_type_year,c(\"type\",\"year\"),sep=1,convert=TRUE) %>% \n  mutate(time=as.integer(substr(time,12,15)))\n\n#Linking release locations to settlement locations based on bin\nfor(i in unique(dataset$bin)){\n  x <- rl$bin==i\n  y <- dataset$bin==i\n  dataset$long0[y] <- rl$long0[x]\n  dataset$lat0[y] <- rl$lat0[x]\n  dataset$Z0[y] <- rl$Z0[x]\n  dataset$delay[y] <- rl$delay[x]\n  dataset$site0[y] <- rl$site0[x]\n}\nhead(dataset)\nView(dataset)\n\n#Giving each larvae a unique ID\nCon_df <- dataset\nCon_df <- subset(Con_df, select = -c(filename, Out, site, time))\nCon_df$larvae_ID <- row.names(Con_df) \n\nRelease_df <- subset(Con_df, select = c(long0, lat0, Z0, larvae_ID))\nSettle_df <- subset(Con_df, select = c(long, lat, Z, larvae_ID))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#####################extra TO BE REINSERTED\n\n\n\n\n###Clipping release map locations to intertidal, nearshore, and offshore habitat\nhead(release_larvae@data)\n#Intertidal\nIntertidal_release <- release_larvae[release_larvae@data$Z0 > -10,]\nIntertidal_release <- Intertidal_release[Intertidal_release@data$Z0 < 5,]\n\nwriteOGR(Intertidal_release, dsn = \"C:/Christopher_MSc/Remi_data/ParticleTracking/present/intertidal\", layer = \"Intertidal_release\", driver = \"ESRI Shapefile\")\n\n#Nearshore\nNearshore_release <- release_larvae[release_larvae@data$Z0 > -60,]\nNearshore_release <- Nearshore_release[Nearshore_release@data$Z0 < -10,]\n\nwriteOGR(Nearshore_release, dsn = \"C:/Christopher_MSc/Remi_data/ParticleTracking/present/nearshore\", layer = \"Nearshore_release\", driver = \"ESRI Shapefile\")\n\n#Offshore\nOffshore_release <- release_larvae[release_larvae@data$Z0 > -250,]\nOffshore_release <- Offshore_release[Offshore_release@data$Z0 < -60,]\n\nwriteOGR(Offshore_release, dsn = \"C:/Christopher_MSc/Remi_data/ParticleTracking/present/offshore\", layer = \"Offshore_release\", driver = \"ESRI Shapefile\")\n\n",
    "created" : 1489245754575.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3804593637",
    "id" : "3994D5F6",
    "lastKnownWriteTime" : 1489245790,
    "last_content_update" : 1489245790563,
    "path" : "C:/Christopher/Github/ParticleTracking/Present_particle_locations.R",
    "project_path" : "Present_particle_locations.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}